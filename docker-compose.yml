services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "-w", "1", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  broker:
    image: confluentinc/cp-kafka:7.3.1
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
    networks:
      - kafka-network

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: iman
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_replication_slots=5"
      - "-c"
      - "max_wal_senders=5"
    volumes:
      - ./postgres-init/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  postgres-connect:
    build:
      context: .
      dockerfile: Dockerfile.postgres-connect
    container_name: postgres-connect
    depends_on:
      broker:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "broker:29092"
      CONFIG_STORAGE_TOPIC: pg_config
      OFFSET_STORAGE_TOPIC: pg_offset
      STATUS_STORAGE_TOPIC: pg_status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: /kafka/connect/plugins/postgres
      GROUP_ID: pg-cdc-group
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connector-plugins"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - kafka-network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - kafka-network
    depends_on:
      - broker

  clickhouse-connect:
    image: confluentinc/cp-kafka-connect:7.3.1
    container_name: clickhouse-connect
    ports:
      - "8084:8083"
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=broker:29092
      - CONNECT_REST_ADVERTISED_HOST_NAME=clickhouse-connect
      - CONNECT_GROUP_ID=clickhouse-connect-group
      - CONNECT_CONFIG_STORAGE_TOPIC=_clickhouse-connect-configs
      - CONNECT_OFFSET_STORAGE_TOPIC=_clickhouse-connect-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=_clickhouse-connect-status
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_PLUGIN_PATH=/usr/share/confluent-hub-components
    volumes:
    # Download `clickhouse-kafka-connect-v1.3.2-confluent.jar if not exist in your` ./jars directory
      - ./jars:/usr/share/confluent-hub-components/clickhouse-kafka-connect/lib
    networks:
      - kafka-network
    depends_on:
      - broker


volumes:
  clickhouse_data:

networks:
  kafka-network:
    driver: bridge